type LiquidityPoolAggregator {
  id: ID! # pool address
  chainId: Int!
  name: String! # name of the pool
  token0_id: String! # token0 id
  token1_id: String! # token1 id
  token0_address: String! # token0 address
  token1_address: String! # token1 address
  isStable: Boolean! # whether the pool is a stable AMM or a volatile AMM
  isCL: Boolean! # whether the pool is a CL pool
  reserve0: BigInt! @config(precision: 76) # reserve of token0 in token units
  reserve1: BigInt! @config(precision: 76) # reserve of token1 in token units
  totalLiquidityUSD: BigInt! @config(precision: 76) # total liquidity of the swap pool in USD
  totalVolume0: BigInt! @config(precision: 76) # total swap volume of token0 in token units
  totalVolume1: BigInt! @config(precision: 76) # total swap volume of token1 in token units
  totalVolumeUSD: BigInt! @config(precision: 76) # total swap volume of the pool in USD
  totalVolumeUSDWhitelisted: BigInt! @config(precision: 76) # total swap volume of the pool in USD
  gaugeFees0CurrentEpoch: BigInt! @config(precision: 76) # fees collected for current epoch in token0 units
  gaugeFees1CurrentEpoch: BigInt! @config(precision: 76) # fees collected for current epoch in token1 units
  totalFees0: BigInt! @config(precision: 76) # total fees collected in token0 units
  totalFees1: BigInt! @config(precision: 76) # total fees collected in token1 units
  totalFeesUSD: BigInt! @config(precision: 76) # total fees collected in USD
  totalFeesUSDWhitelisted: BigInt! @config(precision: 76) # total fees collected in USD
  numberOfSwaps: BigInt! @config(precision: 76) # total number of swaps in the pool
  token0Price: BigInt! @config(precision: 76) # price of token0 relative to token1
  token1Price: BigInt! @config(precision: 76) # price of token1 relative to token0
  numberOfVotes: BigInt! @config(precision: 76) # total number of vote transactions
  currentVotingPower: BigInt! @config(precision: 76) # current total voting power for the pool
  totalVotesDeposited: BigInt! @config(precision: 76) # total votes deposited in veToken units
  totalVotesDepositedUSD: BigInt! @config(precision: 76) # total votes deposited in USD
  totalEmissions: BigInt! @config(precision: 76) # total emissions for the pool in reward token units (VELO form Optimism and AERO for Base)
  totalEmissionsUSD: BigInt! @config(precision: 76) # total emissions for the pool in USD
  totalBribesUSD: BigInt! @config(precision: 76) # total bribes for the pool in USD
  gaugeIsAlive: Boolean! # whether the gauge is alive
  gaugeAddress: String @index # address of the gauge for this pool
  token0IsWhitelisted: Boolean! # whether the token0 is whitelisted
  token1IsWhitelisted: Boolean! # whether the token1 is whitelisted
  lastUpdatedTimestamp: Timestamp! # timestamp of last update
  lastSnapshotTimestamp: Timestamp! # timestamp of last snapshot

  # CL Pool specific fields
  feeProtocol0: BigInt @config(precision: 76) # current fee protocol for token0
  feeProtocol1: BigInt @config(precision: 76) # current fee protocol for token1
  observationCardinalityNext: BigInt @config(precision: 76) # oracle observation cardinality
  totalFlashLoanFees0: BigInt @config(precision: 76) # total flash loan fees collected in token0
  totalFlashLoanFees1: BigInt @config(precision: 76) # total flash loan fees collected in token1
  totalFlashLoanFeesUSD: BigInt @config(precision: 76) # total flash loan fees collected in USD
  totalFlashLoanVolumeUSD: BigInt @config(precision: 76) # total flash loan volume in USD
  numberOfFlashLoans: BigInt @config(precision: 76) # total number of flash loans

  # Gauge fields
  numberOfGaugeDeposits: BigInt! @config(precision: 76) # number of gauge deposits (staking)
  numberOfGaugeWithdrawals: BigInt! @config(precision: 76) # number of gauge withdrawals (unstaking)
  numberOfGaugeRewardClaims: BigInt! @config(precision: 76) # number of gauge reward claims
  totalGaugeRewardsClaimedUSD: BigInt! @config(precision: 76) # total gauge rewards claimed in USD
  currentLiquidityStakedUSD: BigInt! @config(precision: 76) # current liquidity staked in gauge in USD

  # Pool Launcher relationship
  poolLauncherPoolId: String # ID of the PoolLauncherPool entity if this pool was launched via Pool Launcher
}

# Snapshot of the LiquidityPool entity
type LiquidityPoolAggregatorSnapshot {
  id: ID! # pool address
  chainId: Int! # chain id
  name: String! # name of the pool
  pool: String! # pool address
  token0_id: String! # token0 id
  token1_id: String! # token1 id
  token0_address: String! # token0 address
  token1_address: String! # token1 address
  isStable: Boolean! # whether the pool is a stable AMM or a volatile AMM
  isCL: Boolean!
  reserve0: BigInt! @config(precision: 76) # reserve of token0 in token units
  reserve1: BigInt! @config(precision: 76) # reserve of token1 in token units
  totalLiquidityUSD: BigInt! @config(precision: 76) # total liquidity of the swap pool in USD
  totalVolume0: BigInt! @config(precision: 76) # total swap volume of token0 in token units
  totalVolume1: BigInt! @config(precision: 76) # total swap volume of token1 in token units
  totalVolumeUSD: BigInt! @config(precision: 76) # total swap volume of the pool in USD
  totalVolumeUSDWhitelisted: BigInt! @config(precision: 76) # total swap volume of the pool in USD
  gaugeFees0CurrentEpoch: BigInt! @config(precision: 76) # fees collected for current epoch in token0 units
  gaugeFees1CurrentEpoch: BigInt! @config(precision: 76) # fees collected for current epoch in token1 units
  totalFees0: BigInt! @config(precision: 76) # total fees collected in token0 units
  totalFees1: BigInt! @config(precision: 76) # total fees collected in token1 units
  totalFeesUSD: BigInt! @config(precision: 76) # total fees collected in USD
  totalFeesUSDWhitelisted: BigInt! @config(precision: 76) # total fees collected in USD
  numberOfSwaps: BigInt! @config(precision: 76) # total number of swaps in the pool
  token0Price: BigInt! @config(precision: 76) # price of token0 relative to token1
  token1Price: BigInt! @config(precision: 76) # price of token1 relative to token0
  numberOfVotes: BigInt! @config(precision: 76) # total number of vote transactions
  currentVotingPower: BigInt! @config(precision: 76) # current total voting power for the pool
  totalVotesDeposited: BigInt! @config(precision: 76) # total votes deposited in veToken units
  totalVotesDepositedUSD: BigInt! @config(precision: 76) # total votes deposited in USD
  totalEmissions: BigInt! @config(precision: 76) # total emissions for the pool in reward token units (VELO form Optimism and AERO for Base)
  totalEmissionsUSD: BigInt! @config(precision: 76) # total emissions for the pool in USD
  totalBribesUSD: BigInt! @config(precision: 76) # total bribes for the pool in USD
  gaugeIsAlive: Boolean! # whether the gauge is alive
  gaugeAddress: String @index # address of the gauge for this pool
  token0IsWhitelisted: Boolean! # whether the token0 is whitelisted
  token1IsWhitelisted: Boolean! # whether the token1 is whitelisted
  timestamp: Timestamp! # timestamp of last update

  # CL Pool specific fields
  feeProtocol0: BigInt @config(precision: 76) # current fee protocol for token0
  feeProtocol1: BigInt @config(precision: 76) # current fee protocol for token1
  observationCardinalityNext: BigInt @config(precision: 76) # oracle observation cardinality
  totalFlashLoanFees0: BigInt @config(precision: 76) # total flash loan fees collected in token0
  totalFlashLoanFees1: BigInt @config(precision: 76) # total flash loan fees collected in token1
  totalFlashLoanFeesUSD: BigInt @config(precision: 76) # total flash loan fees collected in USD
  totalFlashLoanVolumeUSD: BigInt @config(precision: 76) # total flash loan volume in USD
  numberOfFlashLoans: BigInt @config(precision: 76) # total number of flash loans
}

# Entity for tracking user activity and positions in specific pools
type UserStatsPerPool {
  id: ID! # userAddress_poolAddress_chainId
  userAddress: String! @index
  poolAddress: String! @index
  chainId: Int!

  # Liquidity metrics
  currentLiquidityUSD: BigInt! @config(precision: 76) # current net liquidity position in USD
  currentLiquidityToken0: BigInt! @config(precision: 76) # current net liquidity position in token0
  currentLiquidityToken1: BigInt! @config(precision: 76) # current net liquidity position in token1
  totalLiquidityAddedUSD: BigInt! @config(precision: 76) # total liquidity added in USD
  totalLiquidityRemovedUSD: BigInt! @config(precision: 76) # total liquidity removed in USD

  # Fee metrics
  totalFeesContributedUSD: BigInt! @config(precision: 76) # total fees contributed in USD
  totalFeesContributed0: BigInt! @config(precision: 76) # total fees contributed in token0
  totalFeesContributed1: BigInt! @config(precision: 76) # total fees contributed in token1

  # Swap metrics
  numberOfSwaps: BigInt! @config(precision: 76) # number of swaps in this pool
  totalSwapVolumeUSD: BigInt! @config(precision: 76) # swap volume in USD in this pool

  # Flash swap metrics
  numberOfFlashLoans: BigInt! @config(precision: 76) # number of flash loan swaps in this pool
  totalFlashLoanVolumeUSD: BigInt! @config(precision: 76) # flash loan swap volume in USD in this pool

  # Gauge metrics
  numberOfGaugeDeposits: BigInt! @config(precision: 76) # number of gauge deposits (staking)
  numberOfGaugeWithdrawals: BigInt! @config(precision: 76) # number of gauge withdrawals (unstaking)
  numberOfGaugeRewardClaims: BigInt! @config(precision: 76) # number of gauge reward claims
  totalGaugeRewardsClaimedUSD: BigInt! @config(precision: 76) # total gauge rewards claimed in USD
  currentLiquidityStakedUSD: BigInt! @config(precision: 76) # current liquidity staked in gauge in USD

  # Voting metrics
  numberOfVotes: BigInt! @config(precision: 76) # number of vote transactions for this pool
  currentVotingPower: BigInt! @config(precision: 76) # current voting power allocated to this pool by this user

  # Timestamps
  firstActivityTimestamp: Timestamp! # first activity in this pool
  lastActivityTimestamp: Timestamp! # last activity in this pool
}

# Entity that tracks the latest state of the token entity
# By nature this entity saves the latest state of the token, and its state at different times should be attained from the snapshot entities
type Token {
  id: ID! # token address
  address: String! @index # token address
  symbol: String! # token symbol
  name: String! # token name
  chainId: Int! @index
  decimals: BigInt! @config(precision: 76) # number of decimals
  pricePerUSDNew: BigInt! @config(precision: 76) # price of token per USD
  lastUpdatedTimestamp: Timestamp! # timestamp of last update
  isWhitelisted: Boolean! # whether the token is whitelisted
}

# Snapshot of the Token entity
type TokenPriceSnapshot {
  id: ID! # Unique identifier for the record, could be a combination of token address and chain ID
  address: String! @index # Address of the token
  pricePerUSDNew: BigInt! @config(precision: 76) # price of token per USD
  chainId: Int!
  isWhitelisted: Boolean! # whether the token is whitelisted
  lastUpdatedTimestamp: Timestamp! @index # Timestamp of the last update
}

# Event for when a gauge is notified of a reward
type Gauge_NotifyReward {
  id: ID!
  from: String!
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

type Gauge_Deposit {
  id: ID!
  from: String!
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
  transactionHash: String!
}

type Gauge_Withdraw {
  id: ID!
  from: String!
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

# Event for when a voting reward is notified of a reward
type VotingReward_NotifyReward {
  id: ID!
  from: String!
  reward: String!
  epoch: BigInt! @config(precision: 76)
  pool: String!
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

type VotingReward_ClaimRewards {
  id: ID!
  from: String!
  reward: String!
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

type NFPM_Transfer {
  id: ID!
  from: String!
  to: String!
  tokenId: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type NFPM_IncreaseLiquidity {
  id: ID!
  tokenId: BigInt! @config(precision: 76)
  liquidity: BigInt! @config(precision: 76)
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type NFPM_DecreaseLiquidity {
  id: ID!
  tokenId: BigInt! @config(precision: 76)
  liquidity: BigInt! @config(precision: 76)
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type VotingReward_Deposit {
  id: ID!
  from: String!
  tokenId: BigInt! @config(precision: 76)
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type VotingReward_Withdraw {
  id: ID!
  from: String!
  tokenId: BigInt! @config(precision: 76)
  amount: BigInt! @config(precision: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type PoolFactory_SetCustomFee {
  id: ID!
  pool: String!
  fee: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type PoolFactory_PoolCreated {
  id: ID!
  poolFactory: String!
  token0: String!
  token1: String!
  stable: Boolean!
  pool: String! @index
  timestamp: Timestamp!
  blockNumber: Int!
  transactionHash: String!
  logIndex: Int!
  chainId: Int!
}

type SuperchainCLFactory_RootPoolCreated {
  id: ID!
  token0: String!
  token1: String!
  tickSpacing: BigInt! @config(precision: 76)
  pool: String! @index
  poolFactory: String!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  poolChainId: Int!
  chainId: Int!
}

type SuperchainPoolFactory_RootPoolCreated {
  id: ID!
  token0: String!
  token1: String!
  stable: Boolean!
  pool: String! @index
  poolFactory: String!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  poolChainId: Int!
  chainId: Int!
  length: BigInt! @config(precision: 76)
}

type VeNFTAggregator {
  id: ID!
  chainId: Int!
  tokenId: BigInt! @config(precision: 76)
  owner: String!
  locktime: BigInt! @config(precision: 76)
  lastUpdatedTimestamp: Timestamp!
  totalValueLocked: BigInt! @config(precision: 76)
  isAlive: Boolean!
}

type VeNFT_Deposit {
  id: ID!
  provider: String!
  tokenId: BigInt! @config(precision: 76)
  depositType: BigInt! @config(precision: 76)
  value: BigInt! @config(precision: 76)
  locktime: BigInt! @config(precision: 76)
  ts: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type VeNFT_Withdraw {
  id: ID!
  provider: String!
  tokenId: BigInt! @config(precision: 76)
  value: BigInt! @config(precision: 76)
  ts: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type VeNFT_Transfer {
  id: ID!
  from: String!
  to: String!
  tokenId: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type ALMCore_Rebalance {
  id: ID!
  pool: String!
  tickLower: BigInt! @config(precision: 76)
  tickUpper: BigInt! @config(precision: 76)
  sqrtPriceX96: BigInt! @config(precision: 76)
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  ammPositionIdBefore: BigInt! @config(precision: 76)
  ammPositionIdAfter: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ALMCore_Rebalance_AmmPosition {
  id: ID!
  pool: String!
  token0: String!
  token1: String!
  property: BigInt! @config(precision: 24)
  tickLower: BigInt! @config(precision: 24)
  tickUpper: BigInt! @config(precision: 24)
  liquidity: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ALMDeployFactory_StrategyCreated {
  id: ID!
  pool: String!
  lpWrapper: String!
  strategyType: BigInt! @config(precision: 8)
  tickNeighborhood: BigInt! @config(precision: 24)
  tickSpacing: BigInt! @config(precision: 24)
  width: BigInt! @config(precision: 24)
  maxLiquidityRatioDeviationX96: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ALMDeployFactory_StrategyCreated_AmmPosition {
  id: ID!
  pool: String!
  lpWrapper: String!
  token0: String!
  token1: String!
  property: BigInt! @config(precision: 24)
  tickLower: BigInt! @config(precision: 24)
  tickUpper: BigInt! @config(precision: 24)
  liquidity: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ALMLPWrapper_Deposit {
  id: ID!
  sender: String!
  recipient: String!
  pool: String!
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  lpAmount: BigInt! @config(precision: 76)
  totalSupply: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ALMLPWrapper_Withdraw {
  id: ID!
  sender: String!
  recipient: String!
  pool: String!
  amount0: BigInt! @config(precision: 76)
  amount1: BigInt! @config(precision: 76)
  lpAmount: BigInt! @config(precision: 76)
  totalSupply: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ALMLPWrapper_Transfer {
  id: ID!
  from: String!
  to: String!
  value: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ALMLPWrapper_TotalSupplyLimitUpdated {
  id: ID!
  newTotalSupplyLimit: BigInt! @config(precision: 76)
  totalSupplyLimitOld: BigInt! @config(precision: 76)
  totalSupplyCurrent: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
}

type ERC20_Transfer {
  id: ID!
  from: String!
  to: String!
  value: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  chainId: Int!
  blockNumber: Int!
  logIndex: Int!
  transactionHash: String!
}

type Dynamic_Fee_Swap_Module {
  id: ID!
  pool: String!
  baseFee: BigInt! @config(precision: 76)
  feeCap: BigInt! @config(precision: 76)
  scalingFactor: BigInt! @config(precision: 76)
  currentFee: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  chainId: Int!
  blockNumber: Int!
}

type FactoryRegistry_Approve {
  id: ID!
  poolFactory: String!
  votingRewardsFactory: String!
  gaugeFactory: String!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type FactoryRegistry_Unapprove {
  id: ID!
  poolFactory: String!
  votingRewardsFactory: String!
  gaugeFactory: String!
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
  chainId: Int!
}

type DynamicFeeSwapModule_CustomFeeSet {
  id: ID!
  chainId: Int!
  pool: String!
  fee: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
}

type DynamicFeeSwapModule_SecondsAgoSet {
  id: ID!
  chainId: Int!
  secondsAgo: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
}

type DynamicFeeSwapModule_ScalingFactorSet {
  id: ID!
  chainId: Int!
  pool: String!
  scalingFactor: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
}

type DynamicFeeSwapModule_FeeCapSet {
  id: ID!
  chainId: Int!
  pool: String!
  feeCap: BigInt! @config(precision: 76)
  timestamp: Timestamp!
  transactionHash: String!
  blockNumber: Int!
  logIndex: Int!
}

# One per underlying pool (per chain) launched or migrated via Pool Launcher
type PoolLauncherPool {
  id: ID! # `${chainId}-${underlyingPool}`
  chainId: Int!
  underlyingPool: Bytes! # pool address
  launcher: String! # PoolLauncher contract address (the one that created or currently manages)
  creator: String! # msg.sender at Launch
  poolLauncherToken: Bytes! # the "project" token
  pairToken: Bytes! # whitelisted pair (e.g., WETH, USDC)
  createdAt: Timestamp!
  isEmerging: Boolean! # current flag
  lastFlagUpdateAt: Timestamp! # timestamp of last flag change

  # Migration lineage
  migratedFrom: String! # previous underlying pool (if this was target in Migrate)
  migratedTo: String! # next underlying pool (if later migrated away)
  oldLocker: String! # source locker in migration
  newLocker: String! # target locker from migration
  lastMigratedAt: Timestamp!

  poolStats: [LiquidityPoolAggregator!]!
    @derivedFrom(field: "poolLauncherPoolId")
}

type PoolLauncherConfig {
  id: ID!
  version: String! # "CL" for concentrated liquidity, "V2" for V2 pools
  pairableTokens: [String!]
}
